import json

from loguru import logger
from telegram import Update
from telegram.ext import ContextTypes

from wolf_assistant.backend.mongo_logger import MongoLogger

from wolf_assistant.metrics import metrics


async def start_reply(update: Update, context: ContextTypes.DEFAULT_TYPE, mg_logger: MongoLogger) -> None:
    """
    Service commands reply
    Args:
        update (Update): Telegram object represented an incoming update.
        context (ContextTypes.DEFAULT_TYPE): context object
        mg_logger: MongoLogger object
    """

    metrics.CURRENT_USERS.inc()
    metrics.REQUEST_COUNT.inc()
    
    user_name: str = "–î–æ—Ä–æ–≥–æ–π –¥—Ä—É–≥"
    if update.effective_user:
        user_name = update.effective_user.full_name

    reply = f"""
    üåü *–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç "DS –í–æ–ª—á–∏—Ü–∞"* üåü

    üê∫ {user_name}, —Ç–µ–±—è –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç DS –í–æ–ª—á–∏—Ü–∞. üê∫ –¢–µ–±–µ –±–æ–ª—å—à–µ –Ω–µ –ø—Ä–∏–¥–µ—Ç—Å—è —Ä–∞–∑–±–∏—Ä–∞—Ç—å—Å—è –≤ —á—É–∂–æ–º –∫–æ–¥–µ, —Ç–∞–∫ –∫–∞–∫ —è –ø—Ä–æ–∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∏—Ä—É—é –ª—é–±–æ–π –∫–æ–¥ –≤ –ª—é–±–æ–º —Ñ–æ—Ä–º–∞—Ç–µ (—Ç–µ–∫—Å—Ç, –∫–∞—Ä—Ç–∏–Ω–∫–∞, –≤–∏–¥–µ–æ).
    –ñ–¥—É –æ—Ç —Ç–µ–±—è –∫–æ–¥–∞ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏. üê∫

    üìú *–ü—Ä–∞–≤–∏–ª–∞ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è:*
    - *–û–¥–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ ‚Äî –æ–¥–∏–Ω –æ—Ç–≤–µ—Ç:* –Ø –Ω–µ —É–¥–µ—Ä–∂–∏–≤–∞—é –∫–æ–Ω—Ç–µ–∫—Å—Ç –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏, –ø–æ—ç—Ç–æ–º—É –∫–∞–∂–¥–æ–µ —Ç–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Ä–∞—Å—Å–º–∞—Ç—Ä–∏–≤–∞–µ—Ç—Å—è –∫–∞–∫ –æ—Ç–¥–µ–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å.
    - *–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å OpenAI:* –Ø –∏—Å–ø–æ–ª—å–∑—É—é –º–æ–¥–µ–ª–∏ OpenAI –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ —Ç–≤–æ–∏ –≤–æ–ø—Ä–æ—Å—ã.

    –ù–µ —Å—Ç–µ—Å–Ω—è–π—Å—è –∑–∞–¥–∞–≤–∞—Ç—å —Å–≤–æ–∏ –≤–æ–ø—Ä–æ—Å—ã, –∏ —è –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å –ø–æ–º–æ—á—å —Ç–µ–±–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ! üê∫
    """
    update_obj = json.dumps(update.to_dict(), indent=4)
    dummy_mess = "*update object*\n\n" + "```json\n" + update_obj + "\n```"  # Dummy message
    command = update.message.text
    if update.message:
        chat_id = update.message.chat_id
        logger.debug(f"Input message: {command}, Context: {context}")
        mg_logger.log_message(chat_id, command, command, 0, reply)
        mg_logger.log_user_info(chat_id=update.message.chat_id, user_info=update.to_dict())
        await update.message.reply_text(reply, parse_mode="Markdown")  # –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –≤ Telegram
    else:
        msg = "update.message is None"
        mg_logger.log_error(msg)
        raise AttributeError(msg)

    logger.debug(f"Assistant state Start: {dummy_mess}, Context: {context}")
    logger.debug(f"Assistant state Start: {reply}, Context: {context}")
